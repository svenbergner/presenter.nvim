==============================================================================
------------------------------------------------------------------------------
*presenter.nvim*
*Presenter*

MIT License Copyright (c) 2024 Sven Bergner

==============================================================================

Present your markdown files in a slide-like fashion.

------------------------------------------------------------------------------
                                                           *Presenter.setup()*
                          `Presenter.setup`({config})
Module setup

Parameters ~
{config} `(table|nil)`
Usage ~
`require('presenter').setup({})`

------------------------------------------------------------------------------
                                                           *Presenter.config*
                              `Presenter.config`
Module config

Default values:
>lua
  Presenter.config = {
    options = {
      -- The width of the slide buffer.
      width = 60,
    },
    separator = {
      -- Separators for different filetypes.
      -- You can add your own or oberwrite existing ones.
      -- Note: separators are lua patterns, not regexes.
      markdown = "^#+ ",
      org = "^*+ ",
      adoc = "^==+ ",
      asciidoctor = "^==+ ",
    },
    -- Keep the separator, useful if you're parsing based on headings.
    -- If you want to parse on a non-heading separator, e.g. `---` set this to false.
    keep_separator = true,
    keymaps = {
      -- These are local mappings for the open slide buffer.
      -- Disable existing keymaps by setting them to `nil`.
      -- Add your own keymaps as you desire.
      ["n"] = function() Presenter.next() end,
      ["p"] = function() Presenter.prev() end,
      ["q"] = function() Presenter.quit() end,
      ["f"] = function() Presenter.first() end,
      ["l"] = function() Presenter.last() end,
      ["<CR>"] = function() Presenter.next() end,
      ["<BS>"] = function() Presenter.prev() end,
      ["X"] = function() Presenter.run_code_block() end,
    },
    -- A function that configures the slide buffer.
    -- If you want custom settings write your own function that accepts a buffer id as argument.
    configure_slide_buffer = function(buf) H.configure_slide_buffer(buf) end,
  }
<
------------------------------------------------------------------------------
==============================================================================
# Core functionality

------------------------------------------------------------------------------
                                                           *Presenter.toggle()*
                        `Presenter.toggle`({separator})
Toggle presenter mode on/off for the current buffer.
Parameters ~
{separator} `(string|nil)`

------------------------------------------------------------------------------
                                                            *Presenter.start()*
                        `Presenter.start`({separator})
Start presenter the current buffer.
Parameters ~
{separator} `(string|nil)` Overwrite the default separator if specified.

------------------------------------------------------------------------------
                                                             *Presenter.quit()*
                              `Presenter.quit`()
Quit the current presentation and go back to the normal buffer.
By default this is mapped to `q`.

------------------------------------------------------------------------------
                                                             *Presenter.next()*
                              `Presenter.next`()
Go to the next slide.
By default this is mapped to `<CR>` and `n`.

------------------------------------------------------------------------------
                                                             *Presenter.prev()*
                              `Presenter.prev`()
Go to the previous slide.
By default this is mapped to `<BS>` and `p`.

------------------------------------------------------------------------------
                                                            *Presenter.first()*
                              `Presenter.first`()
Go to the first slide.
By default this is mapped to `f`.

------------------------------------------------------------------------------
                                                             *Presenter.last()*
                              `Presenter.last`()
Go to the last slide.
By default this is mapped to `l`.

------------------------------------------------------------------------------
                                                           *Presenter.resize()*
                             `Presenter.resize`()
the slide window.

------------------------------------------------------------------------------
                                                        *H.in_presenter_mode()*
                            `H.in_presenter_mode`()
Return ~
`(boolean)`


 vim:tw=78:ts=8:noet:ft=help:norl:
